http {
  charset utf-8;
  error_log /dev/stdout debug;

	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_ciphers TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256;
	ssl_prefer_server_ciphers on;

  server {
    listen 80;
    listen [::]:80;

    server_name .hiddenalphabet.com;

    location /api/ {
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Server $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      proxy_pass http://api:8080/;
    }

    location / {
      return 301 https://$http_host$request_uri;
    }
  }

  server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name .hiddenalphabet.com;

    ssl_certificate /etc/letsencrypt/live/hiddenalphabet.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/hiddenalphabet.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/hiddenalphabet.com/chain.pem;

    # HTTP Strict Transport Security (HSTS)
    # HSTS helps to enforce that users only use HTTPS to connect
    # to your website, thereby preventing SSL stripping attacks.
    add_header Strict-Transport-Security "max-age=0;";

    # Content Security Policy (CSP)
    # CSP mitigates XSS and related attacks by limiting the resource
    # types an origin is allowed to load onto a given website
    add_header Content-Security-Policy "default-src 'self' 'unsafe-eval' 'unsafe-inline'";

    # Clickjacking protection
    # Clickjacking attacks attempt to trick users into interacting with
    # a website through an attacker controlled frame. Setting the
    # 'frame-ancestors' policy to 'none' directs browsers to disallow
    # the nested rendering of webpages sent from your server
    add_header Content-Security-Policy "frame-ancestors 'none';";

    # Content sniffing protection
    # Incorrectly declared content types _can_ cause browsers to attempt
    # detection of the MIME type of the sent data. In the case that a browser
    # misidentifies data as executable, due to a missing content type, it
    # increases the attack surface at the level internal to the browser
    add_header X-Content-Type-Options "nosniff";

    location / {
      root /var/www/html;
      index index.html;
    }

    location ~ \.js {
      add_header Content-Type "application/javascript";
      root /var/www/assets;
    }

    location ~ \.css {
      add_header Content-Type "text/css";
      root /var/www/assets;
    }

    location ~ \.jpg {
      add_header Content-Type "image/jpeg";
      root /var/www/assets;
    }

    location ~ \.png {
      add_header Content-Type "image/png";
      root /var/www/assets;
    }

    location /api/ {
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Server $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      proxy_pass http://api:8080/;
    }
  }
}

events {
	multi_accept on;
	worker_connections 65535;
}
